name: Build and Release AI Workspace

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'pipeline/**'
  pull_request:
    branches:
      - 'pipeline/**'
  workflow_dispatch:
    inputs:
      ui_version:
        description: 'UI version (tag) from wsp-desktop-ui (e.g., v1.0.0). Leave blank for latest artifact.'
        required: false
        type: string

permissions:
  contents: write
  issues: write

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Tag Name
        id: set_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          else
            TAG="v0.0.0-test-$(date +%s)"
            echo "No tag detected. Using tag: $TAG"
            git tag $TAG
            git push origin $TAG
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash

  fetch-ui-artifact:
    runs-on: ubuntu-latest
    needs: prepare-tag
    outputs:
      artifact_path: ${{ steps.download.outputs.artifact_path }}
    steps:
      - name: Determine UI Artifact
        id: fetch_artifact
        run: |
          if [ -n "${{ github.event.inputs.ui_version }}" ]; then
            # Use specific tag if provided
            UI_TAG="${{ github.event.inputs.ui_version }}"
            ARTIFACT_NAME="wsp-desktop-ui-build-$UI_TAG"
            echo "Fetching specific artifact: $ARTIFACT_NAME"
            gh run list --repo officekube/wsp-desktop-ui --branch "$UI_TAG" --status completed --limit 10 --json databaseId,name,conclusion > runs.json
            echo "Raw gh run list output:"
            cat runs.json
            RUN_ID=$(jq -r '.[] | select(.name == "Build and Zip UI" and .conclusion == "success") | .databaseId' runs.json | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "Error: No successful 'Build and Zip UI' run found for tag $UI_TAG in wsp-desktop-ui"
              exit 1
            fi
          else
            # Fetch the latest successful artifact
            echo "No UI version specified. Fetching latest successful artifact."
            gh run list --repo officekube/wsp-desktop-ui --status completed --limit 10 --json databaseId,name,conclusion > runs.json
            echo "Raw gh run list output:"
            cat runs.json
            RUN_ID=$(jq -r '.[] | select(.name == "Build and Zip UI" and .conclusion == "success") | .databaseId' runs.json | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "Error: No successful 'Build and Zip UI' runs found in wsp-desktop-ui"
              exit 1
            fi
            # Get artifact name from the run
            gh run view $RUN_ID --repo officekube/wsp-desktop-ui --json jobs > jobs.json
            echo "Raw jobs output:"
            cat jobs.json
            ARTIFACT_NAME=$(jq -r '.jobs[].steps[] | select(.conclusion == "success") | .outputs[] | select(.name | startswith("wsp-desktop-ui-build-")) | .name' jobs.json | head -n 1)
            
            # If the above approach doesn't find an artifact, try an alternative approach
            if [ -z "$ARTIFACT_NAME" ]; then
              echo "Trying alternative approach to find artifacts..."
              # List artifacts directly using the run ID
              gh api repos/officekube/wsp-desktop-ui/actions/runs/$RUN_ID/artifacts > direct_artifacts.json
              echo "Raw direct artifacts output:"
              cat direct_artifacts.json
              ARTIFACT_NAME=$(jq -r '.artifacts[] | select(.name | startswith("wsp-desktop-ui-build-")) | .name' direct_artifacts.json | head -n 1)
            fi
            if [ -z "$ARTIFACT_NAME" ]; then
              echo "Error: No artifact named 'wsp-desktop-ui-build-*' found in run $RUN_ID"
              exit 1
            fi
          fi
          echo "Selected artifact: $ARTIFACT_NAME"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download UI Artifact
        id: download
        run: |
          echo "Downloading artifact: ${{ steps.fetch_artifact.outputs.artifact_name }}"
          # Create download directory
          mkdir -p downloaded-ui
          
          # Download the artifact
          gh run download ${{ steps.fetch_artifact.outputs.run_id }} --repo officekube/wsp-desktop-ui --name "${{ steps.fetch_artifact.outputs.artifact_name }}" -D downloaded-ui
          
          # Check what was downloaded (verbose listing)
          echo "Contents of downloaded-ui directory:"
          find downloaded-ui -type f | xargs ls -la
          
          # Check if the expected zip file exists
          EXPECTED_PATH="$(pwd)/downloaded-ui/${{ steps.fetch_artifact.outputs.artifact_name }}/wsp-desktop-ui-build.zip"
          if [ -f "$EXPECTED_PATH" ]; then
            echo "Found expected zip file at: $EXPECTED_PATH"
            echo "artifact_path=$EXPECTED_PATH" >> $GITHUB_OUTPUT
          else
            echo "Expected file not found at: $EXPECTED_PATH"
            # Try to find any zip file
            ZIP_FILE=$(find downloaded-ui -name "*.zip" | head -n 1)
            if [ -n "$ZIP_FILE" ]; then
              echo "Found zip file at: $ZIP_FILE"
              echo "artifact_path=$ZIP_FILE" >> $GITHUB_OUTPUT
            else
              echo "No zip files found in the downloaded artifact"
              # List everything to see what's actually there
              find downloaded-ui -type f
              # If there's any file, use the first one (assuming it might be the build without .zip extension)
              ANY_FILE=$(find downloaded-ui -type f | head -n 1)
              if [ -n "$ANY_FILE" ]; then
                echo "Using this file instead: $ANY_FILE"
                echo "artifact_path=$ANY_FILE" >> $GITHUB_OUTPUT
              else
                echo "No files found in the download. Unable to proceed."
                exit 1
              fi
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Add this step to upload the artifact for use in other jobs
      - name: Upload UI Artifact for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: ui-files
          path: ${{ steps.download.outputs.artifact_path }}
          retention-days: 1

  build:
    needs: [prepare-tag, fetch-ui-artifact]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download UI files
        uses: actions/download-artifact@v4
        with:
          name: ui-files
          path: ./ui-files

      - name: Extract UI Artifact
        shell: bash
        run: |
          # List what we've downloaded
          echo "Contents of ui-files directory:"
          ls -la ui-files
          
          # Check file type
          file ui-files || echo "File command not available"
          
          # Extract based on file type
          if [[ -f ui-files && $(file --mime-type -b ui-files) == "application/zip" ]]; then
            echo "Downloaded file is a zip file, extracting..."
            unzip -o ui-files -d ./ui-extracted
          elif [[ -f ui-files && $(file --mime-type -b ui-files) == "application/gzip" ]]; then
            echo "Downloaded file is a gzip file, extracting..."
            mkdir -p ./ui-extracted
            tar -xzf ui-files -C ./ui-extracted
          elif [[ -d ui-files ]]; then
            echo "Downloaded a directory containing files"
            # Find and extract any zip files
            ZIP_FILES=$(find ui-files -name "*.zip" 2>/dev/null)
            if [ -n "$ZIP_FILES" ]; then
              echo "Found zip files: $ZIP_FILES"
              mkdir -p ./ui-extracted
              for zip_file in $ZIP_FILES; do
                echo "Extracting: $zip_file"
                unzip -o "$zip_file" -d ./ui-extracted
              done
            else
              echo "No zip files found in ui-files, using files as is"
              mkdir -p ./ui-extracted
              cp -r ui-files/* ./ui-extracted/
            fi
          else
            echo "Unknown file type, trying to use as is"
            mkdir -p ./ui-extracted
            cp -r ui-files ./ui-extracted/
          fi
          
          echo "Final contents of ui-extracted directory:"
          ls -la ./ui-extracted

  update-release:
    needs: [build, prepare-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Add additional steps for release updates