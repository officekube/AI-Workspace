name: Build and Release AI Workspace

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'pipeline/**'
  pull_request:
    branches:
      - 'pipeline/**'
  workflow_dispatch:
    inputs:
      ui_version:
        description: 'UI version (tag) from wsp-desktop-ui (e.g., v1.0.0). Leave blank for latest artifact.'
        required: false
        type: string

permissions:
  contents: write
  issues: write

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Tag Name
        id: set_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          else
            TAG="v0.0.0-test-$(date +%s)"
            echo "No tag detected. Using tag: $TAG"
            git tag $TAG
            git push origin $TAG
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash

  fetch-ui-artifact:
    runs-on: ubuntu-latest
    needs: prepare-tag
    outputs:
      artifact_path: ${{ steps.download.outputs.artifact_path }}
    steps:
      - name: Determine UI Artifact
        id: fetch_artifact
        run: |
          if [ -n "${{ github.event.inputs.ui_version }}" ]; then
            # Use specific tag if provided
            UI_TAG="${{ github.event.inputs.ui_version }}"
            ARTIFACT_NAME="wsp-desktop-ui-build-$UI_TAG"
            echo "Fetching specific artifact: $ARTIFACT_NAME"
            gh run list --repo officekube/wsp-desktop-ui --branch "$UI_TAG" --status completed --limit 10 --json databaseId,name,conclusion > runs.json
            echo "Raw gh run list output:"
            cat runs.json
            RUN_ID=$(jq -r '.[] | select(.name == "Build and Zip UI" and .conclusion == "success") | .databaseId' runs.json | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "Error: No successful 'Build and Zip UI' run found for tag $UI_TAG in wsp-desktop-ui"
              exit 1
            fi
          else
            # Fetch the latest successful artifact
            echo "No UI version specified. Fetching latest successful artifact."
            gh run list --repo officekube/wsp-desktop-ui --status completed --limit 10 --json databaseId,name,conclusion > runs.json
            echo "Raw gh run list output:"
            cat runs.json
            RUN_ID=$(jq -r '.[] | select(.name == "Build and Zip UI" and .conclusion == "success") | .databaseId' runs.json | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "Error: No successful 'Build and Zip UI' runs found in wsp-desktop-ui"
              exit 1
            fi
            # Get artifact name from the run
            gh run view $RUN_ID --repo officekube/wsp-desktop-ui --json jobs > jobs.json
            echo "Raw jobs output:"
            cat jobs.json
            ARTIFACT_NAME=$(jq -r '.jobs[].steps[] | select(.conclusion == "success") | .outputs[] | select(.name | startswith("wsp-desktop-ui-build-")) | .name' jobs.json | head -n 1)
            
            # If the above approach doesn't find an artifact, try an alternative approach
            if [ -z "$ARTIFACT_NAME" ]; then
              echo "Trying alternative approach to find artifacts..."
              # List artifacts directly using the run ID
              gh api repos/officekube/wsp-desktop-ui/actions/runs/$RUN_ID/artifacts > direct_artifacts.json
              echo "Raw direct artifacts output:"
              cat direct_artifacts.json
              ARTIFACT_NAME=$(jq -r '.artifacts[] | select(.name | startswith("wsp-desktop-ui-build-")) | .name' direct_artifacts.json | head -n 1)
            fi
            if [ -z "$ARTIFACT_NAME" ]; then
              echo "Error: No artifact named 'wsp-desktop-ui-build-*' found in run $RUN_ID"
              exit 1
            fi
          fi
          echo "Selected artifact: $ARTIFACT_NAME"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download UI Artifact
        id: download
        run: |
          echo "Downloading artifact: ${{ steps.fetch_artifact.outputs.artifact_name }}"
          # Create download directory
          mkdir -p downloaded-ui
          
          # Download the artifact
          gh run download ${{ steps.fetch_artifact.outputs.run_id }} --repo officekube/wsp-desktop-ui --name "${{ steps.fetch_artifact.outputs.artifact_name }}" -D downloaded-ui
          
          # Check what was downloaded (verbose listing)
          echo "Contents of downloaded-ui directory:"
          find downloaded-ui -type f | xargs ls -la
          
          # Check if the expected zip file exists
          EXPECTED_PATH="$(pwd)/downloaded-ui/${{ steps.fetch_artifact.outputs.artifact_name }}/wsp-desktop-ui-build.zip"
          if [ -f "$EXPECTED_PATH" ]; then
            echo "Found expected zip file at: $EXPECTED_PATH"
            echo "artifact_path=$EXPECTED_PATH" >> $GITHUB_OUTPUT
          else
            echo "Expected file not found at: $EXPECTED_PATH"
            # Try to find any zip file
            ZIP_FILE=$(find downloaded-ui -name "*.zip" | head -n 1)
            if [ -n "$ZIP_FILE" ]; then
              echo "Found zip file at: $ZIP_FILE"
              echo "artifact_path=$ZIP_FILE" >> $GITHUB_OUTPUT
            else
              echo "No zip files found in the downloaded artifact"
              # List everything to see what's actually there
              find downloaded-ui -type f
              # If there's any file, use the first one (assuming it might be the build without .zip extension)
              ANY_FILE=$(find downloaded-ui -type f | head -n 1)
              if [ -n "$ANY_FILE" ]; then
                echo "Using this file instead: $ANY_FILE"
                echo "artifact_path=$ANY_FILE" >> $GITHUB_OUTPUT
              else
                echo "No files found in the download. Unable to proceed."
                exit 1
              fi
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [prepare-tag, fetch-ui-artifact]
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Extract UI Artifact
        shell: bash
        run: |
          echo "Artifact path: ${{ needs.fetch-ui-artifact.outputs.artifact_path }}"
          
          # Debug information
          echo "Current directory: $(pwd)"
          echo "Listing downloaded-ui directory:"
          ls -la downloaded-ui/ || echo "downloaded-ui directory not found"
          
          # Look for any directories within downloaded-ui
          find downloaded-ui -type d 2>/dev/null | sort || echo "No directories found in downloaded-ui"
          
          # Look for any files within downloaded-ui
          find downloaded-ui -type f 2>/dev/null | sort || echo "No files found in downloaded-ui"
          
          # Try several possible locations
          echo "Checking various possible locations:"
          POSSIBLE_PATHS=(
            "downloaded-ui/wsp-desktop-ui-build.zip"
            "downloaded-ui/wsp-desktop-ui-build-*/wsp-desktop-ui-build.zip"
          )
          
          EXTRACTION_SUCCESS=false
          
          for path_pattern in "${POSSIBLE_PATHS[@]}"; do
            echo "Checking pattern: $path_pattern"
            for found_path in $path_pattern; do
              if [ -f "$found_path" ]; then
                echo "Found file at: $found_path"
                echo "Trying to extract it..."
                mkdir -p extracted/
                unzip -o "$found_path" -d extracted/ || echo "Unzip failed, but continuing"
                if [ -d "extracted" ] && [ "$(ls -A extracted 2>/dev/null)" ]; then
                  echo "Extraction successful!"
                  echo "Contents of extracted directory:"
                  ls -la extracted/
                  # Copy all extracted files to current directory
                  cp -r extracted/* . || echo "Copy failed, but continuing"
                  EXTRACTION_SUCCESS=true
                  break 2
                else
                  echo "Extraction didn't produce usable files for $found_path"
                fi
              fi
            done
          done
          
          # If we couldn't extract anything, try to find any zip files
          if [ "$EXTRACTION_SUCCESS" = false ]; then
            echo "Looking for any zip files..."
            ZIP_FILES=$(find . -name "*.zip" 2>/dev/null | sort)
            if [ -n "$ZIP_FILES" ]; then
              echo "Found zip files: $ZIP_FILES"
              for zip_file in $ZIP_FILES; do
                echo "Trying to extract: $zip_file"
                mkdir -p extracted/
                unzip -o "$zip_file" -d extracted/ || echo "Unzip failed, but continuing"
                if [ -d "extracted" ] && [ "$(ls -A extracted 2>/dev/null)" ]; then
                  echo "Extraction successful!"
                  echo "Contents of extracted directory:"
                  ls -la extracted/
                  # Copy all extracted files to current directory
                  cp -r extracted/* . || echo "Copy failed, but continuing"
                  EXTRACTION_SUCCESS=true
                  break
                fi
              done
            fi
          fi
          
          # If extraction still failed, look for UI files to use directly
          if [ "$EXTRACTION_SUCCESS" = false ]; then
            echo "Looking for UI files to use directly..."
            UI_FILES=$(find downloaded-ui -type f -not -name "*.zip" 2>/dev/null | sort)
            if [ -n "$UI_FILES" ]; then
              echo "Found UI files, copying them to current directory:"
              echo "$UI_FILES"
              # Create directories as needed
              for file in $UI_FILES; do
                dir=$(dirname "$file")
                mkdir -p "${dir#downloaded-ui/}"
                cp "$file" "${file#downloaded-ui/}" || echo "Copy failed for $file, but continuing"
              done
            else
              echo "No UI files found that could be used."
            fi
          fi
          
          # Finally, list what we have in the current directory
          echo "Final contents of current directory:"
          ls -la
        working-directory: .

      - name: Build macOS Intel Installer
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build-mac-x64

      - name: Build macOS ARM Installer
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build-mac-arm64

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build-win-x64

      - name: Build Linux Installer
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/*.dmg
            dist/*.pkg
            dist/*.exe
            dist/*.msi
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.appimage
          retention-days: 5

  update-release:
    needs: [build, prepare-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
          merge-multiple: false

      - name: Consolidate Artifacts
        shell: bash
        run: |
          mkdir -p release-assets
          for platform_dir in downloaded-artifacts/*; do
            if [ -d "$platform_dir" ]; then
              platform=$(basename "$platform_dir")
              case "$platform" in
                *"windows"*)
                  find "$platform_dir" -type f \( -name "*.exe" -o -name "*.msi" \) -exec cp -v {} release-assets/ \;
                  ;;
                *"macos"*)
                  find "$platform_dir" -type f \( -name "*.dmg" -o -name "*.pkg" \) -exec cp -v {} release-assets/ \;
                  ;;
                *"ubuntu"* | *"linux"*)
                  find "$platform_dir" -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.appimage" \) -exec cp -v {} release-assets/ \;
                  ;;
              esac
            fi
          done
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-tag.outputs.tag }}
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release Notes
        run: |
          npm install @octokit/rest
          RELEASE_TAG=${{ needs.prepare-tag.outputs.tag }} node scripts/update-release.js
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}