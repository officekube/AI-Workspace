name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'feature/**'
  pull_request:
    branches:
      - 'feature/**'

permissions:
  contents: write
  issues: write

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Tag Name for Testing
        id: set_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          else
            TAG="v0.0.0-test-$(date +%s)"
            echo "No tag detected. Creating test tag: $TAG"
            git tag $TAG
            git push origin $TAG
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash

  build:
    needs: prepare-tag
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64
          - os: ubuntu-latest
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Download runtimes
        run: npm run download-runtimes

      - name: Build macOS Intel Installer
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build-mac-x64

      - name: Build macOS ARM Installer
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build-mac-arm64

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

      - name: Build Linux Installer
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/
          retention-days: 5

  update-release:
    needs: [build, prepare-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Delete existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          
          # Try to delete the release if it exists
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG" \
            | jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting existing release..."
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID"
          fi
          
          # Delete the tag
          git push origin :refs/tags/$TAG || true

      - name: Create new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-tag.outputs.tag }}
          files: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release Notes
        run: |
          npm install @octokit/rest
          node scripts/update-release.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}